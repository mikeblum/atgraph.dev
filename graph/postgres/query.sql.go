// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgres

import (
	"context"
)

const explainProfile = `-- name: ExplainProfile :one
SELECT  FROM cypher('atproto_graph_viz', $$
    EXPLAIN MATCH (p:Profile {did: $1})
    RETURN u
$$) as (n agtype)
`

type ExplainProfileRow struct {
}

func (q *Queries) ExplainProfile(ctx context.Context) (ExplainProfileRow, error) {
	row := q.db.QueryRow(ctx, explainProfile)
	var i ExplainProfileRow
	err := row.Scan()
	return i, err
}

const insertProfile = `-- name: InsertProfile :one
SELECT  
FROM cypher('atproto_graph_viz', $$
    MERGE (p:Profile {id: $1})
        ON CREATE
            SET
                p.type		= 'app.bsky.actor.profile',
                -- tracking ingestion lag time
                p.ingested 	= timestamp(),
                p.created 	= $6
        ON MATCH
            SET 
                p.handle	= $2,
                p.rev		= $3,
                p.sig 		= $4,
                p.version 	= $5,
                -- tracking firehose lag time
                p.updated 	= timestamp()
        RETURN p.id AS did, p.ingested AS ingested_ts
$$, $1) as (v agtype)
`

type InsertProfileRow struct {
}

func (q *Queries) InsertProfile(ctx context.Context, cypher interface{}) (InsertProfileRow, error) {
	row := q.db.QueryRow(ctx, insertProfile, cypher)
	var i InsertProfileRow
	err := row.Scan()
	return i, err
}
