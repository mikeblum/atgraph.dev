// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: profiles.sql

package db

import (
	"context"
	"database/sql"
)

const insertProfile = `-- name: InsertProfile :exec
INSERT INTO atgraph.profiles(did, type, handle, created, ingested, rev, sig, version) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertProfileParams struct {
	Did      string
	Type     string
	Handle   sql.NullString
	Created  interface{}
	Ingested interface{}
	Rev      sql.NullString
	Sig      sql.NullString
	Version  interface{}
}

func (q *Queries) InsertProfile(ctx context.Context, arg InsertProfileParams) error {
	_, err := q.db.ExecContext(ctx, insertProfile,
		arg.Did,
		arg.Type,
		arg.Handle,
		arg.Created,
		arg.Ingested,
		arg.Rev,
		arg.Sig,
		arg.Version,
	)
	return err
}

const selectProfiles = `-- name: SelectProfiles :many
SELECT did, type, handle, created, ingested, updated, rev, sig, version FROM atgraph.profiles
`

func (q *Queries) SelectProfiles(ctx context.Context) ([]AtgraphProfile, error) {
	rows, err := q.db.QueryContext(ctx, selectProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AtgraphProfile
	for rows.Next() {
		var i AtgraphProfile
		if err := rows.Scan(
			&i.Did,
			&i.Type,
			&i.Handle,
			&i.Created,
			&i.Ingested,
			&i.Updated,
			&i.Rev,
			&i.Sig,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
